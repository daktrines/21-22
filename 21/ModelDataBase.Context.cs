//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _21
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Pr21Entities : DbContext
    {
        public Pr21Entities()
            : base("name=Pr21Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DirectoryOfEmployee> DirectoryOfEmployees { get; set; }
        public virtual DbSet<ListOfFactory> ListOfFactories { get; set; }
        public virtual DbSet<ReportCard> ReportCards { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TariffReference> TariffReferences { get; set; }
    
        public virtual ObjectResult<ГлавнаяФорма_Result> ГлавнаяФорма()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ГлавнаяФорма_Result>("ГлавнаяФорма");
        }
    
        public virtual int НовыйРаботник(Nullable<int> serviceNumber, string surname, Nullable<int> discharge, Nullable<int> factory)
        {
            var serviceNumberParameter = serviceNumber.HasValue ?
                new ObjectParameter("ServiceNumber", serviceNumber) :
                new ObjectParameter("ServiceNumber", typeof(int));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var dischargeParameter = discharge.HasValue ?
                new ObjectParameter("Discharge", discharge) :
                new ObjectParameter("Discharge", typeof(int));
    
            var factoryParameter = factory.HasValue ?
                new ObjectParameter("Factory", factory) :
                new ObjectParameter("Factory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("НовыйРаботник", serviceNumberParameter, surnameParameter, dischargeParameter, factoryParameter);
        }
    
        public virtual ObjectResult<Задание3_Result> Задание3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Задание3_Result>("Задание3");
        }
    
        public virtual ObjectResult<Задание4_Result> Задание4(Nullable<int> factoryNumber)
        {
            var factoryNumberParameter = factoryNumber.HasValue ?
                new ObjectParameter("FactoryNumber", factoryNumber) :
                new ObjectParameter("FactoryNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Задание4_Result>("Задание4", factoryNumberParameter);
        }
    
        public virtual ObjectResult<string> Задание5()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Задание5");
        }
    
        public virtual ObjectResult<Задание1_Result> Задание1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Задание1_Result>("Задание1");
        }
    
        public virtual ObjectResult<Задание2_Result> Задание2(Nullable<int> factoryNumber)
        {
            var factoryNumberParameter = factoryNumber.HasValue ?
                new ObjectParameter("FactoryNumber", factoryNumber) :
                new ObjectParameter("FactoryNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Задание2_Result>("Задание2", factoryNumberParameter);
        }
    
        public virtual int Задание2_2(Nullable<int> serviceNumber, Nullable<int> factory)
        {
            var serviceNumberParameter = serviceNumber.HasValue ?
                new ObjectParameter("ServiceNumber", serviceNumber) :
                new ObjectParameter("ServiceNumber", typeof(int));
    
            var factoryParameter = factory.HasValue ?
                new ObjectParameter("Factory", factory) :
                new ObjectParameter("Factory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Задание2_2", serviceNumberParameter, factoryParameter);
        }
    }
}
